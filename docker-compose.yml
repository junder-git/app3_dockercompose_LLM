services:
  ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
    container_name: devstral-ollama
    privileged: true
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      # Existing Ollama environment variables
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_MLOCK=${OLLAMA_MLOCK}
      - OLLAMA_MMAP=${OLLAMA_MMAP}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE}
      - OLLAMA_NOPRUNE=${OLLAMA_NOPRUNE}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS}
      - OLLAMA_GPU_LAYERS=${OLLAMA_GPU_LAYERS}
      - OLLAMA_NUM_THREAD=${OLLAMA_NUM_THREAD}
      - OLLAMA_CONTEXT_SIZE=${OLLAMA_CONTEXT_SIZE}
      - OLLAMA_BATCH_SIZE=${OLLAMA_BATCH_SIZE}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - OLLAMA_MODELS=${OLLAMA_MODELS}
      - MODEL_DISPLAY_NAME=${MODEL_DISPLAY_NAME}
      - MODEL_DESCRIPTION=${MODEL_DESCRIPTION}
      - MODEL_TEMPERATURE=${MODEL_TEMPERATURE}
      - MODEL_TOP_P=${MODEL_TOP_P}
      - MODEL_TOP_K=${MODEL_TOP_K}
      - MODEL_REPEAT_PENALTY=${MODEL_REPEAT_PENALTY}
      - MODEL_MIROSTAT=${MODEL_MIROSTAT}
      - MODEL_MIROSTAT_ETA=${MODEL_MIROSTAT_ETA}
      - MODEL_MIROSTAT_TAU=${MODEL_MIROSTAT_TAU}
      - MODEL_USE_MMAP=${MODEL_USE_MMAP}
      - MODEL_USE_MLOCK=${MODEL_USE_MLOCK}
      - MODEL_STOP_SEQUENCES=${MODEL_STOP_SEQUENCES}
      - MODEL_MAX_TOKENS=${MODEL_MAX_TOKENS}
      - MODEL_TIMEOUT=${MODEL_TIMEOUT}
      - CHAT_HISTORY_LIMIT=${CHAT_HISTORY_LIMIT}
    volumes:
      - ./volumes/ollama:/home/ollama/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "/tmp/health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 300s  # Allow time for model download
    networks:
      - devstral-network
  # Redis Database
  redis:
    build: ./redis
    container_name: devstral-redis
    volumes:
      # Bind mounts to local volumes directory
      - ./volumes/redis_data:/data
      - ./volumes/redis_logs:/var/log/redis
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: ${REDIS_CPU}
          memory: ${REDIS_MEMORY}
        reservations:
          cpus: ${REDIS_CPU}
          memory: ${REDIS_MEMORY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Quart Web Application
  quart-app:
    build:
      context: ./quart-app
      dockerfile: Dockerfile
    container_name: devstral-quart-app
    environment:
      - REDIS_URL=${REDIS_URL}
      - OLLAMA_URL=${OLLAMA_URL}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MODEL_TEMPERATURE=${MODEL_TEMPERATURE}
      - MODEL_TOP_P=${MODEL_TOP_P}
      - MODEL_MAX_TOKENS=${MODEL_MAX_TOKENS}
      - MODEL_TIMEOUT=${MODEL_TIMEOUT}
      - CHAT_CACHE_TTL_SECONDS=${CHAT_CACHE_TTL_SECONDS}
      - CHAT_HISTORY_LIMIT=${CHAT_HISTORY_LIMIT}
      - SESSION_LIFETIME_DAYS=${SESSION_LIFETIME_DAYS}
      - SECURE_COOKIES=${SECURE_COOKIES}
      - SSE_HEARTBEAT_INTERVAL=${SSE_HEARTBEAT_INTERVAL}
      - SSE_MAX_CONNECTIONS=${SSE_MAX_CONNECTIONS}
      - SSE_RETRY_TIMEOUT=${SSE_RETRY_TIMEOUT}
    volumes:
      # Bind mounts to local volumes directory
      - ./volumes/app_data:/app/data
      - ./volumes/app_logs:/app/logs
      # Don't mount source code in production for proper volume persistence
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: ${QUART_APP_CPU}
          memory: ${QUART_APP_MEMORY}
        reservations:
          cpus: ${QUART_APP_CPU}
          memory: ${QUART_APP_MEMORY}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    build: ./nginx
    container_name: devstral-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/static:/usr/share/nginx/html/static:ro
      - ./volumes/nginx_cache:/var/cache/nginx
      - ./volumes/nginx_logs:/var/log/nginx
    depends_on:
      quart-app:
        condition: service_healthy
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: ${NGINX_CPU}
          memory: ${NGINX_MEMORY}
        reservations:
          cpus: ${NGINX_CPU}
          memory: ${NGINX_MEMORY}
    restart: unless-stopped

networks:
  devstral-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Remove the volumes section since we're using bind mounts
# volumes:
#   nginx_cache:
#     driver: local
#   nginx_logs:
#     driver: local
#   ollama_models:
#     driver: local