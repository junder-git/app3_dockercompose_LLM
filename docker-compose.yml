version: '3.8'

services:
  # Nginx Reverse Proxy with extended timeouts
  nginx:
    build: ./nginx
    container_name: devstral-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/static:/usr/share/nginx/html/static:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - quart-app
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # Ollama CUDA Server with PERMANENT model loading
  ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
    container_name: devstral-ollama
    volumes:
      # Persistent volume for Ollama models (critical for 14GB model)
      - ollama_models:/root/.ollama
      - ./ollama/scripts:/scripts:ro
      - ./ollama/Modelfile:/root/Modelfile:ro
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODEL=${OLLAMA_MODEL:-devstral:24b}
      - OLLAMA_KEEP_ALIVE=-1              # PERMANENT: Never unload model
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      # Keep your working configuration
      - OLLAMA_GPU_LAYERS=${OLLAMA_GPU_LAYERS:-12}
      - OLLAMA_NUM_THREAD=${OLLAMA_NUM_THREAD:-10}
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_MAIN_GPU=0
      # Memory and performance optimization for permanent loading
      - OLLAMA_FLASH_ATTENTION=${OLLAMA_FLASH_ATTENTION:-1}
      - OLLAMA_LOW_VRAM=${OLLAMA_LOW_VRAM:-1}
      # Extended startup time for model pre-loading
      - OLLAMA_LOAD_TIMEOUT=10m           # Allow 10 minutes for model loading
      - OLLAMA_CONTEXT_SIZE=8192
      - OLLAMA_BATCH_SIZE=128
    ports:
      - "11434:11434"
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: ${OLLAMA_MEMORY_LIMIT:-22G}    # Higher for permanent loading
        reservations:
          cpus: '4.0'
          memory: ${OLLAMA_MEMORY_RESERVATION:-10G}  # Higher reservation
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    runtime: nvidia
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 600s                  # 10 minutes startup period for model loading

  # Quart Web Application with shorter timeouts (model pre-loaded)
  quart-app:
    build:
      context: ./quart-app
      dockerfile: Dockerfile
    container_name: devstral-quart-app
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-devstral:24b}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - MODEL_TEMPERATURE=${MODEL_TEMPERATURE:-0.7}
      - MODEL_TOP_P=${MODEL_TOP_P:-0.9}
      - MODEL_MAX_TOKENS=${MODEL_MAX_TOKENS:-1024}
      - MODEL_TIMEOUT=${MODEL_TIMEOUT:-60}          # Shorter since model is pre-loaded
      - RATE_LIMIT_MESSAGES_PER_MINUTE=${RATE_LIMIT_MESSAGES_PER_MINUTE:-5}
      - CHAT_CACHE_TTL_SECONDS=${CHAT_CACHE_TTL_SECONDS:-7200}
      - CHAT_HISTORY_LIMIT=${CHAT_HISTORY_LIMIT:-15}
      - SESSION_LIFETIME_DAYS=${SESSION_LIFETIME_DAYS:-7}
      - SECURE_COOKIES=${SECURE_COOKIES:-false}
      # SSE Configuration
      - SSE_HEARTBEAT_INTERVAL=${SSE_HEARTBEAT_INTERVAL:-30}
      - SSE_MAX_CONNECTIONS=${SSE_MAX_CONNECTIONS:-10}
      - SSE_RETRY_TIMEOUT=${SSE_RETRY_TIMEOUT:-5000}
    volumes:
      # Persistent volume for application data
      - app_data:/app/data
      - app_logs:/app/logs
      # Development mount (comment out for production)
      - ./quart-app:/app
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: ${QUART_APP_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '1.0'
          memory: ${QUART_APP_MEMORY_RESERVATION:-512M}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Database with persistence
  redis:
    build: ./redis
    container_name: devstral-redis
    volumes:
      # Persistent volume for Redis data
      - redis_data:/data
      - redis_logs:/var/log/redis
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: ${REDIS_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  devstral-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  # Nginx volumes
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  
  # Ollama volumes (critical for 14GB model persistence)
  ollama_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/ollama_models
  
  # Application volumes
  app_data:
    driver: local
  app_logs:
    driver: local
  
  # Redis volumes
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/redis_data
  redis_logs:
    driver: local