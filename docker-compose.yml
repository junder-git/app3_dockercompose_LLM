version: '3.8'

services:
  # Ollama CUDA Server with PRIVILEGED MODE for mlock support
  ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
      args:
        - CACHEBUST=${CACHEBUST:-1}
    container_name: devstral-ollama
    # CRITICAL: Privileged mode enables mlock functionality
    privileged: true
    # CRITICAL: Enable shared memory for better performance
    shm_size: 2gb
    # CRITICAL: Unlimited memory locks for mlock
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    # CRITICAL: Add capabilities for memory locking
    cap_add:
      - IPC_LOCK
      - SYS_NICE
    volumes:
      - ollama_models:/root/.ollama
      - ./ollama/scripts:/scripts:ro
      - ./ollama/Modelfile:/root/Modelfile:ro
      # Mount /dev/shm for shared memory (improves performance)
      - /dev/shm:/dev/shm
    environment:
      # GPU Settings
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      
      # Ollama Core Settings
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODEL=${OLLAMA_MODEL:-devstral:24b}
      - OLLAMA_KEEP_ALIVE=-1              # PERMANENT: Never unload model
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_LOAD_TIMEOUT=15m           # Allow 15 minutes for full model loading
      - OLLAMA_NOPRUNE=true               # Never auto-unload models
      
      # GPU Optimization Settings
      - OLLAMA_GPU_LAYERS=${OLLAMA_GPU_LAYERS:-22}
      - OLLAMA_MAIN_GPU=0
      - OLLAMA_NUM_THREAD=${OLLAMA_NUM_THREAD:-8}
      - OLLAMA_CONTEXT_SIZE=${OLLAMA_CONTEXT_SIZE:-16384}
      - OLLAMA_BATCH_SIZE=${OLLAMA_BATCH_SIZE:-256}
      
      # CRITICAL: Memory optimization settings
      - OLLAMA_MLOCK=${OLLAMA_MLOCK:-true}                 # ENABLED: Lock model in RAM/VRAM
      - OLLAMA_MMAP=${OLLAMA_MMAP:-false}                  # DISABLED: Force full RAM loading
      - OLLAMA_NUMA=${OLLAMA_NUMA:-false}                  # Disable NUMA for single-GPU
      
      # Additional Performance Settings
      - OLLAMA_FLASH_ATTENTION=${OLLAMA_FLASH_ATTENTION:-true}
      - OLLAMA_LOW_VRAM=${OLLAMA_LOW_VRAM:-false}
      
      # System Settings
      - MALLOC_MMAP_THRESHOLD_=65536
      - MALLOC_TRIM_THRESHOLD_=65536
      
    ports:
      - "11434:11434"
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: ${OLLAMA_MEMORY_LIMIT:-24G}
        reservations:
          cpus: '4.0'
          memory: ${OLLAMA_MEMORY_RESERVATION:-12G}
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    runtime: nvidia
    restart: unless-stopped
    
    # ENHANCED HEALTHCHECK: More comprehensive model verification (silent)
    healthcheck:
      test: |
        bash -c '
        # Check 1: Ollama API responding (silent)
        curl -sf http://localhost:11434/api/tags >/dev/null 2>&1 || exit 1
        
        # Check 2: Model readiness markers exist
        [ -f /tmp/model_ready ] || exit 1
        [ -f /tmp/model_loaded ] || exit 1
        [ -f /tmp/ollama_ready ] || exit 1
        
        # Check 3: Active model file exists and has content
        [ -s /tmp/active_model ] || exit 1
        ACTIVE_MODEL=$(cat /tmp/active_model 2>/dev/null)
        
        # Check 4: Memory configuration exists
        [ -f /tmp/memory_config ] || exit 1
        
        # Check 5: Quick model response test with active model (silent)
        response=$(timeout 30 curl -sf -X POST http://localhost:11434/api/chat \
          -H "Content-Type: application/json" \
          -d "{\"model\": \"$ACTIVE_MODEL\", \"messages\": [{\"role\": \"user\", \"content\": \"test\"}], \"stream\": false, \"keep_alive\": -1, \"options\": {\"num_predict\": 1}}" 2>/dev/null)
        
        # Check 6: Verify we got a proper JSON response with message content
        echo "$response" | grep -q "\"message\"" && echo "$response" | grep -q "\"content\"" || exit 1
        
        # Check 7: Verify model is still loaded (keep_alive working)
        echo "$response" | grep -q "\"done\":true" || exit 1
        
        # Check 8: GPU memory usage check (if nvidia-smi available) - silent
        if command -v nvidia-smi >/dev/null 2>&1; then
          GPU_MEM=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits 2>/dev/null | head -1)
          if [ -n "$GPU_MEM" ] && [ "$GPU_MEM" -lt 4000 ]; then
            # Only log warning to a file, not stdout
            echo "$(date): Warning: GPU memory usage seems low ($GPU_MEM MB)" >> /tmp/healthcheck.log 2>/dev/null || true
          fi
        fi
        
        # All checks passed - model is fully ready and optimized
        exit 0
        '
      interval: 45s
      timeout: 60s
      retries: 30                         # Allow 30 retries = ~25 minutes for initial load
      start_period: 1500s                 # 25 minutes startup period for complete loading

  # Redis Database - starts independently
  redis:
    build: ./redis
    container_name: devstral-redis
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: ${REDIS_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Quart Web Application - WAITS for model to be fully loaded
  quart-app:
    build:
      context: ./quart-app
      dockerfile: Dockerfile
    container_name: devstral-quart-app
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-devstral:24b}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - MODEL_TEMPERATURE=${MODEL_TEMPERATURE:-0.7}
      - MODEL_TOP_P=${MODEL_TOP_P:-0.9}
      - MODEL_MAX_TOKENS=${MODEL_MAX_TOKENS:-2048}
      - MODEL_TIMEOUT=${MODEL_TIMEOUT:-120}
      - RATE_LIMIT_MESSAGES_PER_MINUTE=${RATE_LIMIT_MESSAGES_PER_MINUTE:-80}
      - CHAT_CACHE_TTL_SECONDS=${CHAT_CACHE_TTL_SECONDS:-7200}
      - CHAT_HISTORY_LIMIT=${CHAT_HISTORY_LIMIT:-25}
      - SESSION_LIFETIME_DAYS=${SESSION_LIFETIME_DAYS:-7}
      - SECURE_COOKIES=${SECURE_COOKIES:-false}
      - SSE_HEARTBEAT_INTERVAL=${SSE_HEARTBEAT_INTERVAL:-30}
      - SSE_MAX_CONNECTIONS=${SSE_MAX_CONNECTIONS:-1000}
      - SSE_RETRY_TIMEOUT=${SSE_RETRY_TIMEOUT:-5000}
      # Pass through Ollama optimization settings for display
      - OLLAMA_GPU_LAYERS=${OLLAMA_GPU_LAYERS:-22}
      - OLLAMA_MLOCK=${OLLAMA_MLOCK:-true}
      - OLLAMA_MMAP=${OLLAMA_MMAP:-false}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./quart-app:/app
    depends_on:
      # CRITICAL: Now waits for BOTH services to be truly ready
      ollama:
        condition: service_healthy        # Waits for model to be loaded and responding
      redis:
        condition: service_healthy        # Waits for Redis to be ready
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: ${QUART_APP_MEMORY_LIMIT:-3G}
        reservations:
          cpus: '1.0'
          memory: ${QUART_APP_MEMORY_RESERVATION:-1G}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy - WAITS for quart-app to be ready
  nginx:
    build: ./nginx
    container_name: devstral-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/static:/usr/share/nginx/html/static:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      # CRITICAL: Only starts after quart-app is healthy (which waits for ollama)
      quart-app:
        condition: service_healthy
    networks:
      - devstral-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

networks:
  devstral-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local
  
  ollama_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/ollama_models
  
  app_data:
    driver: local
  app_logs:
    driver: local
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/redis_data
  redis_logs:
    driver: local