# nginx/nginx.conf - Updated configuration with simplified variables

worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;
env ADMIN_USERNAME;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    resolver 127.0.0.11 ipv6=off;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";

    # Shared memory zones
    lua_shared_dict guest_sessions 10m;
    lua_shared_dict sse_sessions 5m;

    server {
        listen 80;
        server_name localhost;

        # SIMPLIFIED VARIABLES - ALL must be declared here
        set $user_type 'isnone';
        set $username 'anonymous';
        set $is_admin 'false';
        set $is_approved 'false';
        set $is_guest 'false';
        set $guest_slot_id '';  # Now stores slot_number (1 or 2) as string

        root /usr/local/openresty/nginx/html;
        index index.html;

        # Error page definitions
        error_page 404 @custom_404;
        error_page 500 502 503 504 @custom_50x;
        error_page 429 @custom_429;

        # Static files
        location / {
            try_files $uri $uri/ =404;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public";
        }

        # Custom 404 page
        location @custom_404 {
            internal;
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_404_page()
            }
        }

        # Custom 50x page
        location @custom_50x {
            internal;
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_50x_page()
            }
        }

        # Custom 429 page (Guest slots full)
        location @custom_429 {
            internal;
            content_by_lua_block {
                local f = io.open("/usr/local/openresty/nginx/html/429.html", "r")
                if f then
                    local content = f:read("*a")
                    f:close()
                    ngx.header.content_type = 'text/html'
                    ngx.say(content)
                else
                    ngx.say("<h1>Guest slots are full</h1><p>All guest slots are currently occupied. Please try again later.</p>")
                end
            }
        }

        # Auth check endpoint
        location /api/auth/check {
            content_by_lua_block {
                local is_who = require "is_who"
                local user_info = is_who.get_user_info()
                ngx.header.content_type = 'application/json'
                ngx.say(require("cjson").encode(user_info))
            }
        }

        # Example /chat endpoint
        location /chat {
            content_by_lua_block {
                local is_who = require "is_who"
                is_who.route_to_handler("chat")
            }
        }

        # Example /api/chat/ endpoint
        location /api/chat/ {
            content_by_lua_block {
                local is_who = require "is_who"
                is_who.route_to_handler("chat_api")
            }
        }

        # Example /dash endpoint
        location /dash {
            content_by_lua_block {
                local is_who = require "is_who"
                is_who.route_to_handler("dash")
            }
        }

        # Example: API router (if needed)
        location /api/ {
            default_type text/html;
            content_by_lua_file /usr/local/openresty/nginx/lua/api_router.lua;
        }
    }
}
