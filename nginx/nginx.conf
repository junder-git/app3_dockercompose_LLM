# nginx/nginx.conf - Fixed configuration
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;
env ADMIN_USERNAME;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    resolver 127.0.0.11 ipv6=off;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    
    # Shared memory zones
    lua_shared_dict guest_sessions 10m;
    lua_shared_dict sse_sessions 5m;

    server {
        listen 80;
        server_name localhost;
        
        # SIMPLIFIED VARIABLES - Only what's needed
        set $user_type '';
        set $username '';
        set $is_admin '';
        set $is_approved '';
        set $is_guest '';
        set $guest_slot_id '';

        # STATIC ASSETS - No auth required
        location /js/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /css/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /static/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location = /favicon.ico {
            root /usr/local/openresty/nginx/html;
            log_not_found off;
            access_log off;
        }

        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # TEMPLATE-BASED ROUTES
        location = /login {
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_login_page()
            }
        }
        
        location = /register {
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_register_page()
            }
        }

        # INDEX WITH TEMPLATE SYSTEM
        location = / {
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_index_page()
            }
        }
        
        # CHAT SPA ROUTE
        location = /chat {
            content_by_lua_block {
                local is_who = require "is_who"
                is_who.route_to_handler("chat")
            }
        }
        
        # DASH SPA ROUTE
        location = /dash {
            content_by_lua_block {
                local is_who = require "is_who"
                is_who.route_to_handler("dash")
            }
        }

        # API ROUTES
        location ~ ^/api/auth/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local login = require "login"
                login.handle_auth_api()
            }
        }

        location = /api/register {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local register = require "register"
                register.handle_register_api()
            }
        }

        location ~ ^/api/admin/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local is_admin = require "is_admin"
                is_admin.handle_admin_api()
            }
        }

        # GUEST API - Separate from chat API
        location ~ ^/api/guest/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local is_guest = require "is_guest"
                is_guest.handle_guest_api()
            }
        }

        # CHAT API - Handles all chat-related endpoints
        location ~ ^/api/chat/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            add_header 'Cache-Control' 'no-cache';
            add_header 'Connection' 'keep-alive';
            
            lua_need_request_body on;
            content_by_lua_block {
                local is_who = require "is_who"
                local user_type, username = is_who.set_vars()
                
                -- Block pending users from chat API
                if user_type ~= "none" and user_type ~= "guest" and ngx.var.is_approved ~= "true" then
                    ngx.status = 403
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Account pending approval - chat access denied", "is_approved": false, "redirect": "/pending"}')
                    ngx.exit(403)
                end
                
                -- Route to appropriate handler based on user type
                if ngx.var.is_admin == "true" then
                    local is_admin = require "is_admin"
                    is_admin.handle_chat_api()
                elseif ngx.var.is_approved == "true" then
                    local is_approved = require "is_approved"
                    is_approved.handle_chat_api()
                else
                    -- For guests and unauthenticated users, route to guest chat handler
                    local is_guest = require "is_guest"
                    is_guest.handle_chat_api()
                end
            }
        }

        # ERROR PAGES
        error_page 404 @custom_404;
        error_page 500 502 503 504 @custom_50x;
        
        location @custom_404 {
            internal;
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_404_page()
            }
        }
        
        location @custom_50x {
            internal;
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_50x_page()
            }
        }

        # CATCH-ALL for unknown routes
        location / {
            content_by_lua_block {
                local is_public = require "is_public"
                is_public.handle_404_page()
            }
        }
    }
}