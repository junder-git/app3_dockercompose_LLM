# Minimal working nginx.conf - Manual admin creation
user nobody;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Create admin user directly in init_by_lua_block using raw socket
    init_by_lua_block {
        local admin_username = os.getenv("ADMIN_USERNAME") or "admin1"
        local admin_password = os.getenv("ADMIN_PASSWORD") or "admin1"
        local admin_user_id = os.getenv("ADMIN_USER_ID") or "admin"
        
        ngx.shared.config:set("admin_username", admin_username)
        ngx.shared.config:set("admin_password", admin_password)
        ngx.shared.config:set("admin_user_id", admin_user_id)
        
        ngx.log(ngx.ERR, "INIT: Admin credentials loaded - " .. admin_username)
        
        -- Use raw socket instead of resty.redis
        local socket = require "resty.socket"
        local tcp = socket.tcp
        
        local ok, err = pcall(function()
            local sock = tcp()
            if not sock then
                ngx.log(ngx.ERR, "INIT: Failed to create socket")
                return
            end
            
            -- Connect directly to Redis container
            local ok, err = sock:connect("devstral-redis", 6379)
            if not ok then
                ngx.log(ngx.ERR, "INIT: Socket connection failed: " .. (err or "unknown"))
                sock:close()
                return
            end
            
            ngx.log(ngx.ERR, "INIT: Connected to Redis via raw socket")
            
            -- Check if user exists using raw Redis protocol
            local exists_cmd = "EXISTS user:" .. admin_username .. "\r\n"
            local bytes, err = sock:send(exists_cmd)
            if not bytes then
                ngx.log(ngx.ERR, "INIT: Failed to send EXISTS command: " .. (err or "unknown"))
                sock:close()
                return
            end
            
            local data, err = sock:receive()
            if not data then
                ngx.log(ngx.ERR, "INIT: Failed to receive EXISTS response: " .. (err or "unknown"))
                sock:close()
                return
            end
            
            ngx.log(ngx.ERR, "INIT: EXISTS response: " .. data)
            
            -- If user exists (response is ":1"), skip creation
            if data:match(":1") then
                ngx.log(ngx.ERR, "INIT: Admin user already exists - skipping")
                sock:close()
                return
            end
            
            ngx.log(ngx.ERR, "INIT: Creating admin user...")
            
            -- Create user using raw Redis HMSET protocol
            local timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
            local hmset_cmd = "HMSET user:" .. admin_username .. 
                " id " .. admin_user_id ..
                " username " .. admin_username ..
                " password_hash " .. admin_password ..
                " is_admin true" ..
                " is_approved true" ..
                " created_at " .. timestamp .. "\r\n"
            
            ngx.log(ngx.ERR, "INIT: Sending HMSET command")
            
            local bytes, err = sock:send(hmset_cmd)
            if not bytes then
                ngx.log(ngx.ERR, "INIT: Failed to send HMSET command: " .. (err or "unknown"))
                sock:close()
                return
            end
            
            local response, err = sock:receive()
            if not response then
                ngx.log(ngx.ERR, "INIT: Failed to receive HMSET response: " .. (err or "unknown"))
                sock:close()
                return
            end
            
            ngx.log(ngx.ERR, "INIT: HMSET response: " .. response)
            
            if response:match("OK") then
                ngx.log(ngx.ERR, "INIT: ✅ Admin user created successfully via raw socket!")
            else
                ngx.log(ngx.ERR, "INIT: ❌ Unexpected HMSET response: " .. response)
            end
            
            sock:close()
        end)
        
        if not ok then
            ngx.log(ngx.ERR, "INIT: Error during raw socket admin creation: " .. tostring(err))
        end
    }

    # Shared memory zones
    lua_shared_dict config 1m;

    # Upstreams
    upstream redis_backend {
        server devstral-redis:6379;
        keepalive 10;
    }

    upstream ollama_backend {
        server devstral-ollama:11434;
        keepalive 8;
    }

    # Redis connection settings
    redis2_connect_timeout 1s;
    redis2_send_timeout 1s;
    redis2_read_timeout 1s;

    server {
        listen 80;
        server_name localhost;

        root /usr/local/openresty/nginx/html;
        index index.html;

        # Admin creation happens automatically on first login attempt

        # Internal Redis operations
        location ~ ^/redis-internal/hgetall/(.+) {
            internal;
            redis2_query hgetall $1;
            redis2_pass redis_backend;
        }

        location ~ ^/redis-internal/exists/(.+) {
            internal;
            redis2_query exists $1;
            redis2_pass redis_backend;
        }

        location ~ ^/redis-internal/hmset/(.+) {
            internal;
            set_by_lua_block $redis_cmd {
                local key_and_args = ngx.var[1]
                local parts = {}
                for part in key_and_args:gmatch("[^/]+") do
                    table.insert(parts, part)
                end
                
                local cmd = "hmset"
                for i, part in ipairs(parts) do
                    cmd = cmd .. " " .. part
                end
                return cmd
            }
            redis2_raw_query $redis_cmd;
            redis2_pass redis_backend;
        }

        # Generic redis2 fallback
        location ~ ^/redis-internal/(.+) {
            internal;
            redis2_raw_query $1;
            redis2_pass redis_backend;
        }

        # ===== AUTH ENDPOINTS =====
        
        location = /api/auth/login {
            content_by_lua_file /usr/local/openresty/nginx/lua/auth.lua;
        }

        location = /api/auth/register {
            content_by_lua_file /usr/local/openresty/nginx/lua/auth.lua;
        }

        location = /api/auth/verify {
            content_by_lua_file /usr/local/openresty/nginx/lua/auth.lua;
        }

        location = /health {
            content_by_lua_block {
                ngx.say('{"status": "healthy", "timestamp": "' .. ngx.utctime() .. '"}')
            }
        }

        # Static HTML routes
        location = / { try_files /index.html =404; }
        location = /login { try_files /login.html =404; }
        location = /register { try_files /register.html =404; }
        location = /chat { try_files /chat.html =404; }
        location = /admin { try_files /admin.html =404; }

        # Static files
        location / {
            try_files $uri $uri/ =404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
    }
}