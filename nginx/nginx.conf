# nginx/nginx.conf - Secure configuration with internal Node.js backend

user nginx;
worker_processes auto;
worker_rlimit_nofile 65536;
pid /var/run/nginx.pid;
error_log /var/log/nginx/error.log warn;

events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 10M;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=ollama_limit:10m rate=50r/m;
    
    limit_req_status 429;

    # Upstream definitions
    upstream node_backend {
        server localhost:3000;  # Internal Node.js backend
    }
    
    upstream ollama_backend {
        server ollama:11434;
    }

    # Internal auth subrequest
    location = /auth {
        internal;
        proxy_pass http://node_backend/api/auth/verify;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    server {
        listen 80 default_server;
        server_name localhost ai.junder.uk _;
        
        root /usr/share/nginx/html;
        index index.html;

        # Security Headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # =====================================================
        # STATIC FILES (Public)
        # =====================================================
        
        location / {
            try_files $uri $uri/ /index.html;
            expires 1h;
            add_header Cache-Control "public, max-age=3600";
        }
        
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }

        # Public pages (no auth required)
        location ~* ^/(login|register|$) {
            try_files $uri $uri/ /index.html;
        }

        # =====================================================
        # API ROUTES (All handled by internal Node.js backend)
        # =====================================================
        
        # Public auth endpoints
        location /api/auth/login {
            limit_req zone=auth_limit burst=5 nodelay;
            proxy_pass http://node_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/auth/register {
            limit_req zone=auth_limit burst=5 nodelay;
            proxy_pass http://node_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Protected API endpoints
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            # Require authentication for all other API calls
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            auth_request_set $is_admin $upstream_http_x_is_admin;
            
            proxy_pass http://node_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            proxy_set_header X-Is-Admin $is_admin;
        }

        # =====================================================
        # PROTECTED STATIC PAGES
        # =====================================================
        
        location ~* ^/(chat|admin|user-detail) {
            auth_request /auth;
            try_files $uri $uri/ /index.html;
        }

        # =====================================================
        # OLLAMA PROXY (Protected)
        # =====================================================
        
        location /api/ollama/ {
            limit_req zone=ollama_limit burst=20 nodelay;
            
            auth_request /auth;
            auth_request_set $user_id $upstream_http_x_user_id;
            
            rewrite ^/api/ollama/(.*)$ /$1 break;
            proxy_pass http://ollama_backend;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Streaming support
            proxy_buffering off;
            proxy_cache off;
            proxy_timeout 300s;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # =====================================================
        # ERROR PAGES
        # =====================================================
        
        error_page 401 403 /unauthorized.html;
        error_page 429 /rate_limited.html;
        error_page 502 503 504 /50x.html;
        error_page 404 /404.html;
        
        location = /unauthorized.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /rate_limited.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}