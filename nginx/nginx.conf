# nginx/nginx.conf - Final configuration with unified session management
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;
env ADMIN_USERNAME;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    resolver 127.0.0.11 ipv6=off;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    
    # Shared memory zones
    lua_shared_dict guest_sessions 10m;     # For guest chat sessions
    lua_shared_dict sse_sessions 5m;        # For SSE session management (max 5 sessions)
    lua_shared_dict rate_limiting 10m;      # For rate limiting
    lua_shared_dict session_stats 1m;       # For session statistics

    server {
        listen 80;
        server_name localhost;
        
        # Declare nginx variables for Lua use
        set $auth_user_type '';
        set $auth_username '';
        set $auth_slot_num '';
        set $auth_is_admin '';
        set $sse_session_id '';

        # STATIC ASSETS - No auth required
        location /js/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /css/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /assets/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location /static/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location = /favicon.ico {
            root /usr/local/openresty/nginx/html;
            log_not_found off;
            access_log off;
        }

        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # SSE SESSION STATUS ENDPOINT - For monitoring
        location = /api/sse/status {
            content_by_lua_block {
                local session_manager = require "unified_session_manager"
                local cjson = require "cjson"
                
                local stats = session_manager.get_session_stats()
                
                ngx.header.content_type = 'application/json'
                ngx.say(cjson.encode({
                    success = true,
                    stats = stats,
                    timestamp = os.date("!%Y-%m-%dT%TZ")
                }))
            }
        }

        # AUTH API ROUTES - No auth required (public endpoints)
        location = /api/auth/login {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local auth = require "auth"
                auth.handle_login()
            }
        }

        location = /api/auth/me {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            content_by_lua_block {
                local auth = require "auth"
                auth.handle_me()
            }
        }

        location = /api/auth/logout {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            content_by_lua_block {
                local auth = require "auth"
                auth.handle_logout()
            }
        }

        location = /api/register {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local register = require "register"
                register.handle_register()
            }
        }

        # CHAT API ROUTES - Use unified session management with SSE priority system
        location = /api/chat/stream {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            add_header 'Cache-Control' 'no-cache';
            add_header 'Connection' 'keep-alive';
            
            access_by_lua_block {
                local session_manager = require "unified_session_manager"
                
                local user_type, username, slot_num, is_admin = session_manager.check_user_access()
                
                if not user_type then
                    ngx.status = 401
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Authentication required", "message": "No valid session"}')
                    ngx.exit(401)
                end
                
                -- Check if user can start SSE session (priority system)
                local can_start, message, priority = session_manager.can_start_sse_session(user_type, username, is_admin)
                
                if not can_start then
                    ngx.status = 503
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "SSE capacity reached", "message": "' .. message .. '", "max_sessions": ' .. session_manager.MAX_SSE_SESSIONS .. '}')
                    ngx.exit(503)
                end
                
                -- Start SSE session
                local success, session_message, session_id = session_manager.start_sse_session(user_type, username, is_admin)
                
                if not success then
                    ngx.status = 503
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Could not start SSE session", "message": "' .. session_message .. '"}')
                    ngx.exit(503)
                end
                
                -- Store user info for use in content phase
                ngx.var.auth_user_type = user_type
                ngx.var.auth_username = username
                ngx.var.auth_is_admin = tostring(is_admin)
                ngx.var.sse_session_id = session_id
                if slot_num then
                    ngx.var.auth_slot_num = tostring(slot_num)
                end
                
                ngx.log(ngx.INFO, "SSE session started: " .. session_id .. " (" .. session_message .. ")")
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local chat_api = require "chat_api_unified"
                chat_api.handle_chat_stream()
            }
            
            log_by_lua_block {
                -- Clean up SSE session when connection ends
                local session_manager = require "unified_session_manager"
                local session_id = ngx.var.sse_session_id
                
                if session_id then
                    session_manager.end_sse_session(session_id)
                end
            }
        }

        location ~ ^/api/chat/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            access_by_lua_block {
                local session_manager = require "unified_session_manager"
                local user_type, username, slot_num, is_admin = session_manager.check_user_access()
                
                if not user_type then
                    ngx.status = 401
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Authentication required", "message": "No valid session"}')
                    ngx.exit(401)
                end
                
                -- Store user info for use in content phase
                ngx.var.auth_user_type = user_type
                ngx.var.auth_username = username
                ngx.var.auth_is_admin = tostring(is_admin)
                if slot_num then
                    ngx.var.auth_slot_num = tostring(slot_num)
                end
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local chat_api = require "chat_api_unified"
                chat_api.handle_chat_api()
            }
        }

        # GUEST API ROUTES - For guest session creation
        location ~ ^/api/guest/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local chat_api = require "chat_api_unified"
                chat_api.handle_chat_api()
            }
        }

        # ADMIN API ROUTES - Admin access only
        location ~ ^/api/admin/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            access_by_lua_block {
                local session_manager = require "unified_session_manager"
                local user_type, username, slot_num, is_admin = session_manager.check_user_access()
                
                if not is_admin or user_type ~= "admin" then
                    ngx.status = 403
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Admin access required"}')
                    ngx.exit(403)
                end
                
                ngx.var.auth_username = username
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local uri = ngx.var.uri
                
                if string.match(uri, "^/api/admin/sse") then
                    local admin_sse_api = require "admin_sse_api"
                    admin_sse_api.handle_admin_session_api()
                else
                    local admin_users_api = require "admin_users_api"
                    admin_users_api.handle_admin_users_api()
                end
            }
        }

        # HTML PAGES - Static public pages
        location = / {
            try_files /index.html =404;
        }

        location = /login.html {
            try_files /login.html =404;
        }

        location = /register.html {
            try_files /register.html =404;
        }

        # CHAT PAGE - Use updated chat module with unified session support
        location = /chat.html {
            content_by_lua_block {
                local session_manager = require "unified_session_manager"
                local user_type, username, slot_num, is_admin = session_manager.check_user_access()
                
                local template_data = {
                    username = "Guest",
                    user_type = user_type or "none",
                    is_guest = "false",
                    is_admin = "false",
                    storage_type = "localStorage",
                    navigation = "",
                    max_sse_sessions = session_manager.MAX_SSE_SESSIONS
                }
                
                if user_type == "admin" then
                    template_data.username = username
                    template_data.user_type = "admin"
                    template_data.is_admin = "true"
                    template_data.storage_type = "redis"
                    
                    -- Create admin nav
                    local nav_html = string.format([[
<nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/"><i class="bi bi-lightning-charge-fill"></i> ai.junder.uk</a>
        <div class="navbar-nav ms-auto">
            <a class="nav-link" href="/admin.html"><i class="bi bi-gear"></i> Admin</a>
            <a class="nav-link" href="/dashboard.html"><i class="bi bi-speedometer2"></i> Dashboard</a>
            <span class="navbar-text me-3">%s (Admin)</span>
            <button class="btn btn-outline-light btn-sm" onclick="DevstralCommon.logout()"><i class="bi bi-box-arrow-right"></i> Logout</button>
        </div>
    </div>
</nav>
]], username)
                    template_data.navigation = nav_html
                    
                elseif user_type == "user" then
                    template_data.username = username
                    template_data.user_type = "user"
                    template_data.storage_type = "redis"
                    
                    -- Create user nav
                    local nav_html = string.format([[
<nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/"><i class="bi bi-lightning-charge-fill"></i> ai.junder.uk</a>
        <div class="navbar-nav ms-auto">
            <a class="nav-link" href="/dashboard.html"><i class="bi bi-speedometer2"></i> Dashboard</a>
            <span class="navbar-text me-3">%s</span>
            <button class="btn btn-outline-light btn-sm" onclick="DevstralCommon.logout()"><i class="bi bi-box-arrow-right"></i> Logout</button>
        </div>
    </div>
</nav>
]], username)
                    template_data.navigation = nav_html
                    
                elseif user_type == "guest" then
                    template_data.username = username
                    template_data.user_type = "guest"
                    template_data.is_guest = "true"
                    template_data.storage_type = "localStorage"
                    
                    local limits = session_manager.get_guest_limits(username)
                    if limits then
                        template_data.guest_limits = require("cjson").encode(limits)
                    end
                    
                    -- Create guest nav
                    local nav_html = string.format([[
<nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/"><i class="bi bi-lightning-charge-fill"></i> ai.junder.uk</a>
        <div class="navbar-nav ms-auto">
            <span class="navbar-text me-3">%s (Guest)</span>
            <a class="nav-link" href="/register.html"><i class="bi bi-person-plus"></i> Register</a>
        </div>
    </div>
</nav>
]], username)
                    template_data.navigation = nav_html
                    
                else
                    -- No session - show landing page with guest option
                    local stats = session_manager.get_session_stats()
                    template_data.can_create_guest = stats.available_slots > 0
                    template_data.sse_utilization = stats.utilization_percent
                    
                    -- Create public nav
                    local nav_html = [[
<nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/"><i class="bi bi-lightning-charge-fill"></i> ai.junder.uk</a>
        <div class="navbar-nav ms-auto">
            <a class="nav-link" href="/login.html"><i class="bi bi-box-arrow-in-right"></i> Login</a>
            <a class="nav-link" href="/register.html"><i class="bi bi-person-plus"></i> Register</a>
        </div>
    </div>
</nav>
]]
                    template_data.navigation = nav_html
                end
                
                local template = require "template"
                template.render_template("/usr/local/openresty/nginx/html/chat.html", template_data)
            }
        }

        # ADMIN PAGE - Admin access required
        location = /admin.html {
            access_by_lua_block {
                local session_manager = require "unified_session_manager"
                local user_type, username, slot_num, is_admin = session_manager.check_user_access()
                
                if not is_admin or user_type ~= "admin" then
                    return ngx.redirect("/login.html?redirect=" .. ngx.escape_uri("/admin.html"))
                end
                
                ngx.var.auth_username = username
            }
            
            content_by_lua_block {
                local admin = require "admin"
                admin.handle_admin()
            }
        }

        # USER DASHBOARD - Approved user access required
        location = /dashboard.html {
            access_by_lua_block {
                local session_manager = require "unified_session_manager"
                local user_type, username, slot_num, is_admin = session_manager.check_user_access()
                
                if not user_type or user_type == "guest" then
                    return ngx.redirect("/login.html?redirect=" .. ngx.escape_uri("/dashboard.html"))
                end
                
                ngx.var.auth_username = username
            }
            
            content_by_lua_block {
                -- Load navigation template
                local nav_html = ""
                local nav_file = io.open("/usr/local/openresty/nginx/html/nav.html", "r")
                if nav_file then
                    nav_html = nav_file:read("*a")
                    nav_file:close()
                    nav_html = nav_html:gsub("{{username}}", ngx.var.auth_username)
                    nav_html = nav_html:gsub("{{admin_link}}", "")
                end
                
                local template = require "template"
                template.render_template("/usr/local/openresty/nginx/html/dashboard.html", {
                    navigation = nav_html,
                    username = ngx.var.auth_username
                })
            }
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
        }
        
        location = /50x.html {
            internal;
        }

        # Catch-all for any other routes
        location / {
            content_by_lua_block {
                ngx.status = 404
                ngx.header.content_type = "application/json"
                ngx.say('{"error": "Not found"}')
            }
        }
    }
}