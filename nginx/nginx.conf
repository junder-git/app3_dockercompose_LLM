# nginx/nginx.conf - ENHANCED WITH RATE LIMITING AND TIMEOUT FIXES
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;
env MODEL_URL;
env MODEL_NAME;
env MODEL_GGUF_PATH;
env MODEL_TEMPERATURE;
env MODEL_TOP_P;
env MODEL_TOP_K;
env MODEL_MIN_P;
env MODEL_NUM_CTX;
env MODEL_NUM_PREDICT;
env MODEL_REPEAT_PENALTY;
env MODEL_REPEAT_LAST_N;
env MODEL_SEED;
env OLLAMA_GPU_LAYERS;
env OLLAMA_NUM_THREAD;
env OLLAMA_KEEP_ALIVE;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # =============================================================================
    # RATE LIMITING CONFIGURATION - NEW SECURITY LAYER
    # =============================================================================
    
    # Rate limiting zones - Different limits for different endpoint types
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;      # Auth: 5 requests/minute
    limit_req_zone $binary_remote_addr zone=chat:10m rate=15r/m;     # Chat: 15 requests/minute  
    limit_req_zone $binary_remote_addr zone=guest:10m rate=2r/m;     # Guest: 2 requests/minute
    limit_req_zone $binary_remote_addr zone=admin:10m rate=10r/m;    # Admin: 10 requests/minute
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/m;  # General: 30 requests/minute
    
    # Connection limiting - Max concurrent connections per IP
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Rate limit logging
    log_format rate_limit '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'rt=$request_time ut="$upstream_response_time" '
                         'rl="$limit_req_status"';

    # =============================================================================
    # TIMEOUT CONFIGURATION - FIXED AND TIERED
    # =============================================================================
    
    # Client timeouts - NEW PROTECTION
    client_body_timeout 60s;
    client_header_timeout 60s;
    client_max_body_size 10M;
    
    # CRITICAL: Disable ALL buffering for streaming
    sendfile        off;  # DISABLED for streaming
    tcp_nopush      off;  # DISABLED for streaming
    tcp_nodelay     on;   # ENABLED for immediate delivery
    keepalive_timeout  65;

    # STREAMING: No buffering anywhere
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_http_version 1.1;
    
    # STREAMING: No compression for SSE
    gzip off;  # DISABLED - gzip breaks streaming
    
    resolver 127.0.0.11 ipv6=off;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    
    # FIXED: Lua settings - REASONABLE TIMEOUTS
    lua_socket_keepalive_timeout 300s;   # 5 minutes (was 3600s)
    lua_socket_read_timeout 600s;        # 10 minutes for AI responses (was 3600s)
    lua_socket_send_timeout 600s;        # 10 minutes (was 3600s)  
    lua_socket_connect_timeout 30s;      # 30 seconds (was 3600s) - CRITICAL FIX

    # CLOUDFLARE PROXY CONFIGURATION
    # Set real IP from Cloudflare
    set_real_ip_from 173.245.48.0/20;   # Cloudflare IP ranges
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 2400:cb00::/32;    # IPv6 ranges
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2a06:98c0::/29;
    set_real_ip_from 2c0f:f248::/32;
    
    real_ip_header CF-Connecting-IP;  # Use Cloudflare's real IP header
    real_ip_recursive on;

    server {
        # Listen on 443 with HTTP (SSL terminated by Cloudflare)
        listen 443;
        server_name ai.junder.uk localhost;

        # =============================================================================
        # GLOBAL RATE LIMITING - APPLY TO ALL LOCATIONS
        # =============================================================================
        
        # Global connection limit per IP
        limit_conn addr 10;
        
        # Global rate limit (applies to unspecified locations)
        limit_req zone=general burst=10 nodelay;

        # Handle both Cloudflare proxied and direct localhost access
        set $forwarded_scheme $scheme;
        if ($http_x_forwarded_proto) {
            set $forwarded_scheme $http_x_forwarded_proto;
        }

        # Allow direct localhost access without redirects
        set $is_localhost 0;
        if ($server_name = "localhost") {
            set $is_localhost 1;
        }
        if ($remote_addr = "127.0.0.1") {
            set $is_localhost 1;
        }
        if ($remote_addr ~ "^172\.(1[6-9]|2[0-9]|3[0-1])\.") {
            set $is_localhost 1;  # Docker networks
        }
        if ($remote_addr ~ "^192\.168\.") {
            set $is_localhost 1;  # Local networks
        }

        # =============================================================================
        # STATIC ASSETS - MINIMAL RATE LIMITING
        # =============================================================================
        
        location /js/ {
            limit_req zone=general burst=20 nodelay;  # Higher burst for assets
            root /usr/local/openresty/nginx/dynamic_content;
            expires 48h;
            add_header Cache-Control "public, immutable";
        }
        
        location /css/ {
            limit_req zone=general burst=20 nodelay;  # Higher burst for assets
            root /usr/local/openresty/nginx/dynamic_content;
            expires 48h;
            add_header Cache-Control "public, immutable";
        }
        
        location /static/ {
            limit_req zone=general burst=20 nodelay;  # Higher burst for assets
            root /usr/local/openresty/nginx/dynamic_content;
            expires 48h;
            add_header Cache-Control "public, immutable";
        }

        location ~* \.map$ {
            return 404;
            log_not_found off;
            access_log off;
        }

        # =============================================================================
        # TEMPLATE ROUTES - MODERATE RATE LIMITING
        # =============================================================================
        
        location = /login {
            limit_req zone=auth burst=5 nodelay;  # Allow burst for page loads
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("login")
            }
        }

        location = /register {
            limit_req zone=auth burst=5 nodelay;  # Allow burst for page loads
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("register")
            }
        }

        location = / {
            limit_req zone=general burst=15 nodelay;  # Higher for homepage
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("index")
            }
        }

        location = /chat {
            limit_req zone=general burst=10 nodelay;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("chat")
            }
        }

        location = /dash {
            limit_req zone=general burst=10 nodelay;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("dash")
            }
        }

        # =============================================================================
        # AUTH API ROUTES - STRICT RATE LIMITING
        # =============================================================================

        location ~ ^/api/auth/(login|logout|register|status)$ {
            # CRITICAL: Strict rate limiting for auth endpoints
            limit_req zone=auth burst=3 nodelay;
            
            # CRITICAL: Force body to stay in memory, not disk
            client_body_buffer_size 1M;
            client_max_body_size 1M;
            client_body_in_single_buffer on;
            
            # CRITICAL: Enable body reading 
            lua_need_request_body on;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Standard timeouts for auth
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("auth_api")
            }
        }

        # =============================================================================
        # GUEST API ROUTES - VERY STRICT RATE LIMITING
        # =============================================================================
        
        location ~ ^/api/guest/(create-session|create|status)$ {
            # CRITICAL: Very strict limits for guest session creation
            limit_req zone=guest burst=1 nodelay;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # Standard timeouts for guest creation
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("guest_api")
            }
        }

        # =============================================================================
        # CHAT API ROUTES - CRITICAL RATE LIMITING FOR AI ENDPOINTS
        # =============================================================================
        
        location ~ ^/api/chat/stream$ {
            # CRITICAL: This was the main vulnerability - now protected
            limit_req zone=chat burst=5 nodelay;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            # EXTENDED TIMEOUTS FOR LONG AI RESPONSES
            proxy_read_timeout 600s;    # 10 minutes for AI generation
            proxy_send_timeout 600s;    # 10 minutes
            proxy_connect_timeout 30s;  # Quick connect
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("chat_api")
            }
        }
        
        location ~ ^/api/chat/(history|clear|export|search|stats)$ {
            # Moderate rate limiting for non-streaming chat APIs
            limit_req zone=chat burst=10 nodelay;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            # Standard timeouts for chat management
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("chat_api")
            }
        }

        # =============================================================================
        # ADMIN API ROUTES - MODERATE RATE LIMITING WITH MONITORING
        # =============================================================================
        
        location ~ ^/api/admin/(stats|guests)$ {
            # Moderate rate limiting for admin system APIs
            limit_req zone=admin burst=5 nodelay;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            # Standard timeouts for admin operations
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("admin_api")
            }
        }

        location ~ ^/api/admin/users(/|/(pending|approve|reject))?$ {
            # Moderate rate limiting for user management
            limit_req zone=admin burst=5 nodelay;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            # Standard timeouts for user management
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("admin_api")
            }
        }

        location ~ ^/api/admin/session/(status|force-logout|all|cleanup)$ {
            # Moderate rate limiting for session management
            limit_req zone=admin burst=5 nodelay;
            
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            # Standard timeouts for session management
            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("admin_api")
            }
        }

        # =============================================================================
        # ERROR PAGES
        # =============================================================================
        
        error_page 404 @custom_404;
        error_page 429 @custom_429;
        error_page 500 502 503 504 @custom_50x;
        
        location @custom_404 {
            internal;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_404()
            }
        }

        location @custom_429 {
            internal;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_429()
            }
        }
        
        location @custom_50x {
            internal;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_50x()
            }
        }

        # =============================================================================
        # DEFAULT BLOCK ALL - Everything else returns 404
        # =============================================================================
        
        location / {
            return 404;
        }
    }
}