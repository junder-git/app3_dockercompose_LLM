worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # Docker dns
    resolver 127.0.0.11 ipv6=off;
    # Home grown auth
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";

    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    server {
        listen 80;
        server_name localhost;

        # Static files
        location /js/ {
            root /usr/local/openresty/nginx/html;
        }
        location /css/ {
            root /usr/local/openresty/nginx/html;
        }
        location /assets/ {
            root /usr/local/openresty/nginx/html;
        }

        # -------------------
        # AUTH ENDPOINTS
        # -------------------
        location = /api/auth/login {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            lua_need_request_body on;
            content_by_lua_block {
                ngx.req.read_body()
                local auth = require "auth"
                auth.handle_login()
            }
        }

        location = /api/auth/me {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            content_by_lua_block {
                local auth = require "auth"
                auth.handle_me()
            }
        }

        # -------------------
        # REGISTER
        # -------------------
        location = /api/register {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            lua_need_request_body on;
            content_by_lua_block {
                ngx.req.read_body()
                local register = require "register"
                register.handle_register()
            }
        }

        # -------------------
        # CHAT
        # -------------------
        location = /api/chat {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            lua_need_request_body on;
            content_by_lua_block {
                ngx.req.read_body()
                local chat = require "chat"
                chat.handle_chat_message()
            }
        }

        # -------------------
        # ADMIN
        # -------------------
        location = /api/admin {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            content_by_lua_block {
                local admin = require "admin"
                admin.handle_admin_panel()
            }
        }

        # -------------------
        # Page routes
        # -------------------
        location = / {
            try_files /index.html =404;
        }
        location = /login.html {
            try_files /login.html =404;
        }
        location = /register.html {
            try_files /register.html =404;
        }

        # Protected page: chat
        location = /chat.html {
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local token = ngx.var.cookie_access_token
                if not token then
                    return ngx.redirect("/login.html?redirect=chat.html", 302)
                end
                local jwt_obj = jwt:verify(os.getenv("JWT_SECRET"), token)
                if not jwt_obj.verified then
                    return ngx.redirect("/login.html?redirect=chat.html", 302)
                end
            }
            try_files /chat.html =404;
        }

        # Protected page: admin
        location = /admin.html {
            access_by_lua_block {
                local jwt = require "resty.jwt"
                local token = ngx.var.cookie_access_token
                if not token then
                    return ngx.redirect("/login.html?redirect=admin.html", 302)
                end
                local jwt_obj = jwt:verify(os.getenv("JWT_SECRET"), token)
                if not jwt_obj.verified or not jwt_obj.payload.is_admin then
                    return ngx.redirect("/login.html?redirect=admin.html", 302)
                end
            }
            try_files /admin.html =404;
        }

        location = /rate_limit.html {
            internal;
            try_files /rate_limit.html =404;
        }

        location = /50x.html {
            internal;
            try_files /50x.html =500;
        }

        # Default fallback
        location / {
            try_files $uri $uri/ =404;
        }

        # Error pages
        error_page 404 /rate_limit.html;
        error_page 500 502 503 504 /50x.html;
    }
}
