# nginx/nginx.conf - Dynamic routing without .html extensions
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;
env ADMIN_USERNAME;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    resolver 127.0.0.11 ipv6=off;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    
    # Shared memory zones
    lua_shared_dict guest_sessions 10m;
    lua_shared_dict sse_sessions 5m;

    server {
        listen 80;
        server_name localhost;
        
        # Nginx variables set by is_who.lua
        set $user_type '';
        set $username '';
        set $is_admin '';
        set $is_approved '';
        set $is_guest '';
        set $sse_session_id '';

        # STATIC ASSETS - No auth required
        location /js/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /css/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /static/ {
            root /usr/local/openresty/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location = /favicon.ico {
            root /usr/local/openresty/nginx/html;
            log_not_found off;
            access_log off;
        }

        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # AUTHENTICATION API - No auth required (public)
        location ~ ^/api/auth/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local login = require "login"
                login.handle_auth_api()
            }
        }

        # REGISTRATION API - No auth required (public)
        location = /api/register {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local register = require "register"
                register.handle_register()
            }
        }

        # ADMIN API - Admin access required
        location ~ ^/api/admin/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local is_admin = require "is_admin"
                is_admin.handle_admin_api()
            }
        }

        # CHAT API - Approved users and guests
        location ~ ^/api/chat/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            add_header 'Cache-Control' 'no-cache';
            add_header 'Connection' 'keep-alive';
            
            lua_need_request_body on;
            content_by_lua_block {
                local is_who = require "is_who"
                local user_type, username = is_who.set_vars()
                
                -- Block pending users from chat API
                if user_type ~= "none" and user_type ~= "guest" and ngx.var.is_approved ~= "true" then
                    ngx.status = 403
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Account pending approval - chat access denied", "is_approved": false, "redirect": "/pending"}')
                    ngx.exit(403)
                end
                
                if ngx.var.is_approved == "true" then
                    local is_approved = require "is_approved"
                    is_approved.handle_chat_api()
                elseif user_type == "guest" then
                    local is_guest = require "is_guest"
                    is_guest.handle_guest_api()
                else
                    ngx.status = 401
                    ngx.header.content_type = 'application/json'
                    ngx.say('{"error": "Authentication required"}')
                    ngx.exit(401)
                end
            }
            
            log_by_lua_block {
                local server = require "server"
                local session_id = ngx.var.sse_session_id
                if session_id and session_id ~= "" then
                    server.end_sse_session(session_id)
                end
            }
        }

        # GUEST API - For creating guest sessions
        location ~ ^/api/guest/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local is_guest = require "is_guest"
                is_guest.handle_guest_api()
            }
        }

        # =====================================
        # DYNAMIC ROUTES (NO .html EXTENSIONS)
        # =====================================

        # HOME PAGE - Always public
        location = / {
            try_files /index.html =404;
        }

        # LOGIN PAGE - Public
        location = /login {
            try_files /login.html =404;
        }

        # REGISTER PAGE - Public  
        location = /register {
            try_files /register.html =404;
        }

        # CHAT PAGE - Dynamic based on user type
        location = /chat {
            content_by_lua_block {
                local is_who = require "is_who"
                local user_type, username = is_who.set_vars()
                
                if ngx.var.is_approved == "true" then
                    -- Admin/approved users get full chat with Redis
                    local is_approved = require "is_approved"
                    is_approved.handle_chat_page()
                elseif user_type == "guest" then
                    -- Guest users get chat with localStorage
                    local is_guest = require "is_guest"
                    is_guest.handle_guest_chat_page()
                elseif user_type ~= "none" and ngx.var.is_approved ~= "true" then
                    -- Authenticated but not approved = redirect to pending
                    return ngx.redirect("/pending")
                else
                    -- No session - show guest options
                    local is_guest = require "is_guest"
                    is_guest.handle_guest_chat_page()
                end
            }
        }

        # ADMIN DASHBOARD - Admin only
        location = /admin {
            content_by_lua_block {
                local is_admin = require "is_admin"
                is_admin.handle_admin_page()
            }
        }

        # USER DASHBOARD - Approved users only
        location = /dashboard {
            content_by_lua_block {
                local is_who = require "is_who"
                local user_type, username = is_who.set_vars()
                
                if ngx.var.is_admin == "true" then
                    return ngx.redirect("/admin")
                elseif ngx.var.is_approved == "true" then
                    local is_approved = require "is_approved"
                    is_approved.handle_dashboard_page()
                elseif user_type ~= "none" and user_type ~= "guest" then
                    return ngx.redirect("/pending")
                else
                    return ngx.redirect("/login")
                end
            }
        }

        # PENDING DASHBOARD - Authenticated but not approved users
        location = /pending {
            content_by_lua_block {
                local is_who = require "is_who"
                local user_type, username = is_who.set_vars()
                
                if user_type == "none" or user_type == "guest" then
                    return ngx.redirect("/login")
                elseif ngx.var.is_admin == "true" then
                    return ngx.redirect("/admin")
                elseif ngx.var.is_approved == "true" then
                    return ngx.redirect("/dashboard")
                end
                
                -- Authenticated but not approved = pending user
                local nav_html = string.format([[
<nav class="navbar navbar-expand-lg navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/"><i class="bi bi-lightning-charge-fill"></i> ai.junder.uk</a>
        <div class="navbar-nav ms-auto">
            <span class="navbar-text me-3">%s (Pending Approval)</span>
            <button class="btn btn-outline-light btn-sm" onclick="DevstralCommon.logout()"><i class="bi bi-box-arrow-right"></i> Logout</button>
        </div>
    </div>
</nav>
]], username)

                local template = require "template"
                template.render_template("/usr/local/openresty/nginx/html/pending_dash.html", {
                    navigation = nav_html,
                    username = username,
                    is_approved = "false"
                })
            }
        }

        # ERROR PAGES - Serve HTML pages, not JSON
        error_page 404 @custom_404;
        error_page 500 502 503 504 @custom_50x;
        
        location @custom_404 {
            internal;
            try_files /404.html =404;
        }
        
        location @custom_50x {
            internal;
            try_files /50x.html =500;
        }

        # Explicit 404.html and 50x.html locations for direct access
        location = /404.html {
            internal;
        }
        
        location = /50x.html {
            internal;
        }

        # CATCH-ALL for unknown routes - Serve 404 page instead of JSON
        location / {
            content_by_lua_block {
                -- Set proper content type for HTML
                ngx.header.content_type = "text/html"
                ngx.status = 404
                
                -- Try to serve 404.html
                local file = io.open("/usr/local/openresty/nginx/html/404.html", "r")
                if file then
                    local content = file:read("*a")
                    file:close()
                    ngx.say(content)
            }
        }
    }
}