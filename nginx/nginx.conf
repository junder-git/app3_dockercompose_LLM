# nginx/nginx.conf - CLOUDFLARE PROXY COMPATIBLE VERSION
worker_processes auto;
error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

env JWT_SECRET;
env REDIS_HOST;
env REDIS_PORT;
env MODEL_URL;
env MODEL_NAME;
env MODEL_GGUF_PATH;
env MODEL_TEMPERATURE;
env MODEL_TOP_P;
env MODEL_TOP_K;
env MODEL_MIN_P;
env MODEL_NUM_CTX;
env MODEL_NUM_PREDICT;
env MODEL_REPEAT_PENALTY;
env MODEL_REPEAT_LAST_N;
env MODEL_SEED;
env OLLAMA_GPU_LAYERS;
env OLLAMA_NUM_THREAD;
env OLLAMA_KEEP_ALIVE;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # CRITICAL: Disable ALL buffering for streaming
    sendfile        off;  # DISABLED for streaming
    tcp_nopush      off;  # DISABLED for streaming
    tcp_nodelay     on;   # ENABLED for immediate delivery
    keepalive_timeout  65;

    # STREAMING: No buffering anywhere - EXTENDED TIMEOUTS TO 10 MINUTES
    proxy_buffering off;
    proxy_request_buffering off;
    proxy_http_version 1.1;
    proxy_read_timeout 600s;  # 10 minute timeout
    proxy_send_timeout 600s;  # 10 minute timeout
    proxy_connect_timeout 30s; # Connection timeout
    
    # STREAMING: No compression for SSE
    gzip off;  # DISABLED - gzip breaks streaming
    
    resolver 127.0.0.11 ipv6=off;
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    
    # STREAMING: Lua settings - EXTENDED TO 10 MINUTES
    lua_socket_keepalive_timeout 600s;
    lua_socket_read_timeout 600s;
    lua_socket_send_timeout 600s;
    lua_socket_connect_timeout 300s;
    
    # Shared memory zones - INCREASED SIZE FOR CHALLENGE SYSTEM
    lua_shared_dict guest_toggle 64k;
    lua_shared_dict guest_sessions 2m;  # Increased for sessions + challenges
    lua_shared_dict sse_sessions 5m;

    # CLOUDFLARE PROXY CONFIGURATION
    # Set real IP from Cloudflare
    set_real_ip_from 173.245.48.0/20;   # Cloudflare IP ranges
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 2400:cb00::/32;    # IPv6 ranges
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2a06:98c0::/29;
    set_real_ip_from 2c0f:f248::/32;
    
    real_ip_header CF-Connecting-IP;  # Use Cloudflare's real IP header
    real_ip_recursive on;

    server {
        # Listen on 443 with HTTP (SSL terminated by Cloudflare)
        listen 443;
        server_name ai.junder.uk localhost;

        # Handle both HTTP and HTTPS properly
        # Trust Cloudflare's X-Forwarded-Proto header
        set $forwarded_scheme $scheme;
        if ($http_x_forwarded_proto) {
            set $forwarded_scheme $http_x_forwarded_proto;
        }

        # Optional: Force HTTPS redirect for direct access (not through Cloudflare)
        # Uncomment if you want to enforce HTTPS for direct access
        # if ($forwarded_scheme = "http") {
        #     return 301 https://$server_name$request_uri;
        # }

        # STATIC ASSETS - Only exception to default block
        location /js/ {
            root /usr/local/openresty/nginx/dynamic_content;
            expires 48h;
            add_header Cache-Control "public, immutable";
        }
        
        location /css/ {
            root /usr/local/openresty/nginx/dynamic_content;
            expires 48h;
            add_header Cache-Control "public, immutable";
        }
        
        location /static/ {
            root /usr/local/openresty/nginx/dynamic_content;
            expires 48h;
            add_header Cache-Control "public, immutable";
        }

        location ~* \.map$ {
            return 404;
            log_not_found off;
            access_log off;
        }

        # WHITELISTED ROUTES - All go through aaa_is_who for permission checking
        
        # Template routes
        location = /login {
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("login")
            }
        }

        location = /register {
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("register")
            }
        }

        location = / {
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("index")
            }
        }

        location = /chat {
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("chat")
            }
        }

        location = /dash {
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.route_to_handler("dash")
            }
        }

        # AUTH API routes - status
        location = /api/auth/status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_auth_api_status()
            }
        }

        # AUTH API routes - Login and logout only
        location ~ ^/api/auth/(login|logout)$ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_auth_api()
            }
        }

        # REGISTRATION API
        location = /api/register {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_register_api()
            }
        }

        # GUEST API routes - WITH FULL CHALLENGE SYSTEM
        location ~ ^/api/guest/(create-session|challenge-status|challenge-response|stats)$ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_guest_api()
            }
        }

        # ENHANCED CHAT API routes - Authentication handled internally - EXTENDED 10 MIN TIMEOUT
        location ~ ^/api/chat/(stream|history|clear|export|search|stats)$ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            # EXTENDED TIMEOUTS FOR LONG CHAT RESPONSES
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
            proxy_connect_timeout 30s;
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_ollama_chat_api()
            }
        }

        # ADMIN API routes - Authentication handled internally
        location ~ ^/api/admin/(stats|users|clear-guest-sessions)$ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_admin_api()
            }
        }

        # Admin User Management API routes
        location ~ ^/api/admin/users/(pending|approve|reject)$ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            lua_need_request_body on;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_admin_api()
            }
        }

        # ERROR PAGES - Use manage_views through aaa_is_who
        error_page 404 @custom_404;
        error_page 429 @custom_429;
        error_page 500 502 503 504 @custom_50x;
        
        location @custom_404 {
            internal;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_404()
            }
        }

        location @custom_429 {
            internal;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_429()
            }
        }
        
        location @custom_50x {
            internal;
            content_by_lua_block {
                local aaa_is_who = require "aaa_is_who"
                aaa_is_who.handle_50x()
            }
        }

        # DEFAULT BLOCK ALL - Everything else returns 404
        location / {
            return 404;
        }
    }
}
