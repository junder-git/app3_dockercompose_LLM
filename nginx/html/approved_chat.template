<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat - ai.junder.uk</title>
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/common.css">
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <style>
    .user-badge { 
      background: linear-gradient(135deg, #0d6efd, #6610f2); 
      color: white; 
      padding: 0.25rem 0.5rem; 
      border-radius: 12px; 
      font-size: 0.75rem; 
      margin-left: 0.5rem; 
    }
    .model-selector { 
      position: absolute; 
      top: 10px; 
      right: 10px; 
      background: rgba(13, 110, 253, 0.1); 
      border: 1px solid rgba(13, 110, 253, 0.3); 
      border-radius: 8px; 
      padding: 0.5rem; 
      font-size: 0.8rem; 
      color: #0d6efd; 
    }
    .user-features {
      background: rgba(13, 110, 253, 0.1);
      border: 1px solid rgba(13, 110, 253, 0.3);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    .status-indicator {
      position: fixed;
      top: 70px;
      left: 20px;
      background: #0d6efd;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.85rem;
      z-index: 1000;
    }
  </style>
</head>
<body>
  {{ nav }}

  <div class="status-indicator">
    <i class="bi bi-check-circle"></i> Approved User - Full Access
  </div>

  <main class="chat-container">
    <div class="model-selector">
      <i class="bi bi-cpu"></i> <strong>{{ model_name }}</strong>
      <span class="user-badge">APPROVED</span>
    </div>

    <div class="user-features">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h6 class="mb-0"><i class="bi bi-check-circle"></i> Full Access Features</h6>
          <small class="text-muted">Chat history saved • No message limits • Priority access</small>
        </div>
        <div class="d-flex gap-2">
          <button class="btn btn-outline-primary btn-sm" onclick="exportMyChats()">
            <i class="bi bi-download"></i> Export
          </button>
          <button class="btn btn-outline-info btn-sm" onclick="window.open('/dashboard.html', '_blank')">
            <i class="bi bi-speedometer2"></i> Dashboard
          </button>
        </div>
      </div>
    </div>

    <div class="chat-messages" id="chat-messages">
      <div class="welcome-prompt" id="welcome-prompt">
        <h4><i class="bi bi-robot text-primary"></i> Welcome to Devstral AI</h4>
        <p>Hello <strong>{{ username }}</strong>! Your account is approved and ready to use.</p>
        <p><strong>Features:</strong> Unlimited messages • Full chat history • Redis storage • Priority support</p>
        <div class="suggestion-chips">
          <div class="suggestion-chip" data-prompt="Help me debug this Python code:">Debug Python Code</div>
          <div class="suggestion-chip" data-prompt="Create a React component for">Build React Component</div>
          <div class="suggestion-chip" data-prompt="Explain this algorithm:">Explain Algorithm</div>
          <div class="suggestion-chip" data-prompt="Optimize this SQL query:">Optimize SQL</div>
          <div class="suggestion-chip" data-prompt="Review my code for best practices:">Code Review</div>
          <div class="suggestion-chip" data-prompt="Help me design a database schema for">Database Design</div>
        </div>
      </div>
    </div>

    <div class="chat-input-container">
      <form id="chat-form" class="chat-input-form">
        <textarea 
          class="form-control chat-input" 
          id="chat-input" 
          placeholder="Ask me anything about coding, algorithms, or development..." 
          required
          maxlength="6000"></textarea>
        <div class="chat-tools">
          <button type="submit" class="btn btn-primary btn-icon" id="send-button">
            <i class="bi bi-send"></i>
          </button>
          <button type="button" class="btn btn-danger btn-icon stop-button" id="stop-button" style="display: none;">
            <i class="bi bi-stop-fill"></i>
          </button>
          <button type="button" class="btn btn-outline-secondary btn-icon" id="clear-chat">
            <i class="bi bi-trash"></i>
          </button>
        </div>
      </form>
      <div class="form-text text-center mt-2">
        <small class="text-muted">
          <span id="char-count">0</span>/6000 characters • Full User Access • Redis Storage
        </small>
      </div>
    </div>
  </main>

  <script src="/js/lib/jquery.min.js"></script>
  <script src="/js/lib/bootstrap.min.js"></script>
  <script src="/js/common.js"></script>
  <script>
    class ApprovedUserChat {
      constructor() {
        this.username = '{{ username }}';
        this.isTyping = false;
        this.abortController = null;
        this.messageCount = 0;
        this.init();
      }

      init() {
        this.setupEventListeners();
        this.loadChatHistory();
        this.setupSuggestionChips();
        console.log('✅ Approved user chat initialized for:', this.username);
      }

      setupEventListeners() {
        document.getElementById('chat-form').addEventListener('submit', (e) => {
          e.preventDefault();
          this.sendMessage();
        });

        document.getElementById('stop-button').addEventListener('click', () => this.stopGeneration());
        document.getElementById('clear-chat').addEventListener('click', () => this.clearChat());
        
        const textarea = document.getElementById('chat-input');
        textarea.addEventListener('input', (e) => this.updateCharCount());
        textarea.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
          }
        });
      }

      setupSuggestionChips() {
        document.querySelectorAll('.suggestion-chip').forEach(chip => {
          chip.addEventListener('click', () => {
            document.getElementById('chat-input').value = chip.dataset.prompt;
            document.getElementById('chat-input').focus();
            this.updateCharCount();
          });
        });
      }

      updateCharCount() {
        const textarea = document.getElementById('chat-input');
        const count = textarea.value.length;
        document.getElementById('char-count').textContent = count;
      }

      async loadChatHistory() {
        try {
          const response = await fetch('/api/chat/history?limit=30', { credentials: 'include' });
          if (response.ok) {
            const data = await response.json();
            if (data.success && data.messages.length > 0) {
              document.getElementById('welcome-prompt').style.display = 'none';
              data.messages.reverse().forEach(msg => {
                this.addMessage(msg.role === 'user' ? 'user' : 'ai', msg.content, false);
              });
              this.messageCount = data.messages.length;
            }
          }
        } catch (error) {
          console.warn('Could not load chat history:', error);
        }
      }

      async sendMessage() {
        const input = document.getElementById('chat-input');
        const message = input.value.trim();
        
        if (!message || this.isTyping) return;

        document.getElementById('welcome-prompt').style.display = 'none';
        this.addMessage('user', message);
        input.value = '';
        this.updateCharCount();
        
        this.isTyping = true;
        this.updateButtons(true);

        this.abortController = new AbortController();
        const aiMessage = this.addMessage('ai', '', true);
        let accumulated = '';

        try {
          const response = await fetch('/api/chat/stream', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            signal: this.abortController.signal,
            body: JSON.stringify({ 
              message: message, 
              include_history: true,
              options: {
                temperature: 0.7,
                max_tokens: 2048
              }
            })
          });

          if (!response.ok) throw new Error('HTTP ' + response.status);

          const reader = response.body.getReader();
          const decoder = new TextDecoder();

          while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value, { stream: true });
            const lines = chunk.split('\n');

            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const jsonStr = line.slice(6);
                if (jsonStr === '[DONE]') {
                  this.finishStreaming(aiMessage, accumulated);
                  return;
                }

                try {
                  const data = JSON.parse(jsonStr);
                  if (data.content) {
                    accumulated += data.content;
                    this.updateStreamingMessage(aiMessage, accumulated);
                  }
                } catch (e) {}
              }
            }
          }
        } catch (error) {
          if (error.name !== 'AbortError') {
            console.error('Chat error:', error);
            this.updateStreamingMessage(aiMessage, '*Error: ' + error.message + '*');
          }
          this.finishStreaming(aiMessage, accumulated);
        }
      }

      addMessage(sender, content, isStreaming = false) {
        const messagesContainer = document.getElementById('chat-messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message message-${sender}`;
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        if (sender === 'user') {
          contentDiv.innerHTML = `<div class="d-flex align-items-center mb-1">
            <i class="bi bi-person-circle text-primary me-2"></i>
            <strong>${this.username}</strong>
          </div>` + marked.parse(content);
        } else {
          contentDiv.innerHTML = isStreaming ? 
            '<span class="streaming-content"></span>' : 
            marked.parse(content);
        }
        
        messageDiv.appendChild(contentDiv);
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        return messageDiv;
      }

      updateStreamingMessage(messageDiv, content) {
        const streamingEl = messageDiv.querySelector('.streaming-content');
        if (streamingEl) {
          streamingEl.innerHTML = marked.parse(content) + '<span class="cursor">▋</span>';
        }
      }

      finishStreaming(messageDiv, finalContent) {
        const streamingEl = messageDiv.querySelector('.streaming-content');
        if (streamingEl) {
          streamingEl.innerHTML = marked.parse(finalContent);
        }
        this.isTyping = false;
        this.updateButtons(false);
      }

      stopGeneration() {
        if (this.abortController) {
          this.abortController.abort();
        }
      }

      updateButtons(isTyping) {
        document.getElementById('send-button').style.display = isTyping ? 'none' : 'flex';
        document.getElementById('stop-button').style.display = isTyping ? 'flex' : 'none';
        document.getElementById('chat-input').disabled = isTyping;
      }

      async clearChat() {
        if (!confirm('Clear your chat history? This will clear your saved Redis history.')) return;

        try {
          const response = await fetch('/api/chat/clear', {
            method: 'POST',
            credentials: 'include'
          });

          if (response.ok) {
            document.getElementById('chat-messages').innerHTML = '';
            document.getElementById('welcome-prompt').style.display = 'block';
            this.messageCount = 0;
          }
        } catch (error) {
          console.error('Clear chat error:', error);
        }
      }
    }

    // Global functions
    window.exportMyChats = async function() {
      try {
        const response = await fetch('/api/chat/history?limit=1000', {
          credentials: 'include'
        });
        
        if (response.ok) {
          const data = await response.json();
          const exportData = {
            username: window.approvedChat.username,
            exportedAt: new Date().toISOString(),
            messageCount: data.messages.length,
            messages: data.messages
          };

          const blob = new Blob([JSON.stringify(exportData, null, 2)], { 
            type: 'application/json' 
          });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = 'my-chat-history-' + new Date().toISOString().split('T')[0] + '.json';
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }
      } catch (error) {
        console.error('Export error:', error);
        alert('Export failed: ' + error.message);
      }
    };

    document.addEventListener('DOMContentLoaded', () => {
      window.approvedChat = new ApprovedUserChat();
    });
  </script>
</body>
</html>